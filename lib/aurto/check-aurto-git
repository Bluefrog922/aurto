#!/usr/bin/env bash
## Checks aur-git for updates (run as root)
set -u

lib_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
user=$(cat /usr/lib/aurto/user)
command -v aurfetch >/dev/null 2>&1 || { echo >&2 "aurfetch not installed. Aborting."; exit 1; }

# shellcheck source=./shared-functions disable=SC1091
source "$lib_dir/shared-functions"

function clean_aurbuild_build {
  if test -d /var/lib/aurbuild/"$(uname -m)/$user"/build; then
    rm -rf /var/lib/aurbuild/"$(uname -m)/$user"/build/*
  fi
}

function check_auto_updates {
  local dependencies_updated=false

  clean_aurbuild_build

  for dir in *; do
    if [[ -d $dir ]] && pacman -Qq "$dir" >/dev/null 2>&1; then
      cd "$dir" || exit
      echo -n "Checking $dir..." >&2
      
      if [ "$dependencies_updated" = false ]; then
        ## ensure dependencies are up to date
        arch-nspawn /var/lib/aurbuild/"$(uname -m)/$user" /usr/bin/env bash -c \
          "pacman -Syu --noconfirm" >/dev/null 2>&1
        dependencies_updated=true
      fi

      before_ver=$(grep -m1 pkgver= PKGBUILD | sed -e 's/^[^=]*=//g')
      before_rel=$(grep -m1 pkgrel= PKGBUILD | sed -e 's/^[^=]*=//g')
      installed_ver=$(pacman -Q "$dir" | sed -e 's/^[^ ]* //g')

      if test -z "$chroot_arg"; then
        if ! makepkg_output=$(sudo -u "$user" /usr/bin/env bash -c "
            cd $lib_dir/tmp/$dir
            makepkg -sco --noprepare --noconfirm 2>&1
          ")
        then
          echo -e " \\e[31mfailed\\e[39m" >&2
          echo "---makepkg output---" >&2
          echo "$makepkg_output" >&2
          cd ..
          rm -rf "$dir"
          continue
        fi
      else
        # TODO this is pretty fragile relying on aurutils internals
        if ! makepkg_output=$(arch-nspawn /var/lib/aurbuild/"$(uname -m)/$user" \
          --bind="$lib_dir"/tmp/"$dir" \
          -u builduser \
          /usr/bin/env bash -c "
            cd $lib_dir/tmp/$dir
            makepkg -sco --noprepare --noconfirm 2>&1
          ")
        then
          echo -e " \\e[31mfailed\\e[39m" >&2
          echo "---makepkg output---" >&2
          echo "$makepkg_output" >&2
          cd ..
          rm -rf "$dir"
          continue
        fi
      fi

      after_ver=$(grep -m1 pkgver= PKGBUILD | sed -e 's/^[^=]*=//g')
      after_rel=$(grep -m1 pkgrel= PKGBUILD | sed -e 's/^[^=]*=//g')
      cd ..
      if [ "$before_ver-$before_rel" = "$after_ver-$after_rel" ] || \
         [ "$installed_ver" = "$after_ver-$after_rel" ]; then
        echo -e " \\e[32mâœ“ up to date\\e[39m" >&2
      else
        echo -e " \\e[34m$installed_ver -> $after_ver-$after_rel available\\e[39m" >&2
        echo "$dir"
      fi
    fi
    rm -rf "$dir"
  done

  clean_aurbuild_build

  ## clean up unused dependencies installed with makepkg -s
  ## doing it here allows re-use during multiple makepkg calls, rather than -r
  arch-nspawn /var/lib/aurbuild/"$(uname -m)/$user" /usr/bin/env bash -c \
    "pacman -Rns --noconfirm \$(pacman -Qtdq) || true" >/dev/null 2>&1
}

# rm the temporary build files
function rm_tmp {
  rm -rf "$lib_dir"/tmp || true
}
trap rm_tmp EXIT

mkdir -p "$lib_dir"/tmp
cd "$lib_dir"/tmp || exit 1

# All *-git packages
check_for_auto_updates="$(pacman -Slq aurto | grep '\-git$')"

if [ -n "$check_for_auto_updates" ]; then
  echo "$check_for_auto_updates" | aurfetch >/dev/null 2>&1
  chmod -R 0777 "$lib_dir"/tmp
  check_auto_updates
fi
